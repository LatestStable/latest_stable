#!/usr/bin/env ruby

require 'bundler'
require 'English'

def parse_lockfile(lockfile = File.read('Gemfile.lock'))
  Hash[lockfile.each_line.map do |line|
    match = line.match(/\A {4}(?<gem_name>\S+) \((?<version>[^)]+)\)/)
    [match[:gem_name], match[:version]] if match
  end.compact]
end

def reset_gemfile(lockfile)
  File.open('Gemfile.lock', 'w') do |file|
    file.write(lockfile)
  end
end

old_lockfile = File.read('Gemfile.lock')
old_gemspecs = parse_lockfile(old_lockfile)
Bundler.with_clean_env { `bundle update` }
new_gemspecs = parse_lockfile

changed_gems = (old_gemspecs.keys + new_gemspecs.keys).uniq.select do |gem_name|
  old_gemspecs[gem_name] != new_gemspecs[gem_name]
end

if changed_gems.empty?
  puts 'Already on latest stable'
else
  changed_gems.each do |gem_name|
    if old_gemspecs.key?(gem_name) && new_gemspecs.key?(gem_name)
      puts "Updated '#{gem_name}' from #{old_gemspecs[gem_name]} to #{new_gemspecs[gem_name]}"
    elsif old_gemspecs.key?(gem_name)
      puts "Removed '#{gem_name}'"
    else
      puts "Added '#{gem_name}' #{new_gemspecs[gem_name]}"
    end
  end

  Bundler.with_clean_env { `bundle exec rake test` }
  if $CHILD_STATUS.exitstatus == 0
    puts 'success'
  else
    puts 'Tests failed'
    reset_gemfile(old_lockfile)

    updated_gems = changed_gems.select do |gem_name|
      old_gemspecs.key?(gem_name) && new_gemspecs.key?(gem_name)
    end

    updated_gems.each do |gem_name|
      old_step_lockfile = File.read('Gemfile.lock')

      print "Updating '#{gem_name}' from #{old_gemspecs[gem_name]} to #{new_gemspecs[gem_name]} : "

      Bundler.with_clean_env do
        `bundle update #{gem_name}`
        `bundle exec rake test`
      end

      if $CHILD_STATUS.exitstatus == 0
        puts 'success'
      else
        puts 'Tests failed'
        reset_gemfile(old_step_lockfile)
      end
    end
  end
end
